--------------------------------------------------------------------------------
Expression: +42
Lexicons: + 42
Result: 42 = 42
Passed: ✅
--------------------------------------------------------------------------------
Expression: Math.Pow(-average(2, 3, 5), -5)
Lexicons: Math.Pow ( - average ( 2 , 3 , 5 ) , - 5 )
Result: -0.0024299999999999994 = -0.0024299999999999994
Passed: ✅
--------------------------------------------------------------------------------
Expression: Math.Pow(-average(2, 3, 5), 4)
Lexicons: Math.Pow ( - average ( 2 , 3 , 5 ) , 4 )
Result: 123.45679012345681 = 123.45679012345681
Passed: ✅
--------------------------------------------------------------------------------
Expression: 42
Lexicons: 42
Result: 42 = 42
Passed: ✅
--------------------------------------------------------------------------------
Expression: -42
Lexicons: - 42
Result: -42 = -42
Passed: ✅
--------------------------------------------------------------------------------
Expression: -pi
Lexicons: - pi
Result: -3.141592653589793 = -3.141592653589793
Passed: ✅
--------------------------------------------------------------------------------
Expression: 1 + 1 - Math.PI
Lexicons: 1 + 1 - Math.PI
Result: -1.1415926535897931 = -1.1415926535897931
Passed: ✅
--------------------------------------------------------------------------------
Expression: -e + 1 - Math.PI
Lexicons: - e + 1 - Math.PI
Result: -4.859874482048838 = -4.859874482048838
Passed: ✅
--------------------------------------------------------------------------------
Expression: -1 + 1 - Math.PI
Lexicons: - 1 + 1 - Math.PI
Result: -3.141592653589793 = -3.141592653589793
Passed: ✅
--------------------------------------------------------------------------------
Expression: -2 + Math.PI - Math.Ceiling(3.2)
Lexicons: - 2 + Math.PI - Math.Ceiling ( 3.2 )
Result: -2.858407346410207 = -2.858407346410207
Passed: ✅
--------------------------------------------------------------------------------
Expression: IEnumerable.Average(2, 3, 5)
Lexicons: IEnumerable.Average ( 2 , 3 , 5 )
Result: 3.3333333333333335 = 3.3333333333333335
Passed: ✅
--------------------------------------------------------------------------------
Expression: Max(2, 35, 5)
Lexicons: Max ( 2 , 35 , 5 )
Result: 35 = 35
Passed: ✅
--------------------------------------------------------------------------------
Expression: 1 - 2 - 3
Lexicons: 1 - 2 - 3
Result: -4 = -4
Passed: ✅
--------------------------------------------------------------------------------
Expression: 1 - 2 * 3
Lexicons: 1 - 2 * 3
Result: -5 = -5
Passed: ✅
--------------------------------------------------------------------------------
Expression: (1 - 2) * 3
Lexicons: ( 1 - 2 ) * 3
Result: -3 = -3
Passed: ✅
--------------------------------------------------------------------------------
Expression: 1 - Math.Log(10) * 3
Lexicons: 1 - Math.Log ( 10 ) * 3
Result: -5.907755278982138 = -5.907755278982138
Passed: ✅
--------------------------------------------------------------------------------
Expression: (1 - Math.Pow(2, (1 + 2) * 3)) * 3
Lexicons: ( 1 - Math.Pow ( 2 , ( 1 + 2 ) * 3 ) ) * 3
Result: -1533 = -1533
Passed: ✅
--------------------------------------------------------------------------------
Expression: (1 - IEnumerable.Average(2, (1 + 2) * 3, 5)) * 3
Lexicons: ( 1 - IEnumerable.Average ( 2 , ( 1 + 2 ) * 3 , 5 ) ) * 3
Result: -13 = -13
Passed: ✅
--------------------------------------------------------------------------------
Expression: bitincrement(2.5) + 7.1 * floor(-7.4)
Lexicons: bitincrement ( 2.5 ) + 7.1 * floor ( - 7.4 )
Result: -54.3 = -54.3
Passed: ✅
--------------------------------------------------------------------------------
Expression: 20e+3
Lexicons: 20e+3
Result: 20000 = 20000
Passed: ✅
--------------------------------------------------------------------------------
Expression: 23 + 2e-13 * 2.3
Lexicons: 23 + 2e-13 * 2.3
Result: 23.00000000000046 = 23.00000000000046
Passed: ✅
--------------------------------------------------------------------------------
Expression: 23 - 10e-3
Lexicons: 23 - 10e-3
Result: 22.99 = 22.99
Passed: ✅
--------------------------------------------------------------------------------
Expression: 19e-11 /- 12
Lexicons: 19e-11 / - 12
Result: -1.5833333333333334E-11 = -1.5833333333333334E-11
Passed: ✅
--------------------------------------------------------------------------------
Expression: (1 - average(2, (1 + 2) * 3, 23, last(4, 5, 1), 3)) * 3
Lexicons: ( 1 - average ( 2 , ( 1 + 2 ) * 3 , 23 , last ( 4 , 5 , 1 ) , 3 ) ) * 3
Result: -19.799999999999997 = -19.799999999999997
Passed: ✅
--------------------------------------------------------------------------------
Expression: (1 - average(2, 9, 23, last(4, 5, 1), 3)) * 3
Lexicons: ( 1 - average ( 2 , 9 , 23 , last ( 4 , 5 , 1 ) , 3 ) ) * 3
Result: -19.799999999999997 = -19.799999999999997
Passed: ✅
--------------------------------------------------------------------------------
Expression: last(4, last(1, 2), 5)
Lexicons: last ( 4 , last ( 1 , 2 ) , 5 )
Result: 5 = 5
Passed: ✅
--------------------------------------------------------------------------------
Expression: 921.315 * -20.93 % 34.567
Lexicons: 921.315 * - 20.93 % 34.567
Result: -6665.5971101264995 = -6665.5971101264995
Passed: ✅
--------------------------------------------------------------------------------
Expression: 921.315 * mod(-20.93, 34.567)
Lexicons: 921.315 * mod ( - 20.93 , 34.567 )
Result: -19283.12295 = -19283.12295
Passed: ✅
--------------------------------------------------------------------------------
Expression: 25%200
Lexicons: 25 % 200
Result: 50 = 50
Passed: ✅
--------------------------------------------------------------------------------
Expression: 200%25
Lexicons: 200 % 25
Result: 50 = 50
Passed: ✅
--------------------------------------------------------------------------------
Expression: 1.6*-6.7/- 9.6
Lexicons: 1.6 * - 6.7 / - 9.6
Result: 1.1166666666666667 = 1.1166666666666667
Passed: ✅
--------------------------------------------------------------------------------
Expression:  9>>3  /+ 1.2
Lexicons: 9 >> 3 /+ 1.2
Result: 2 = 2
Passed: ✅
--------------------------------------------------------------------------------
Expression:   4 >>  8 >>  1
Lexicons: 4 >> 8 >> 1
Result: 0 = 0
Passed: ✅
--------------------------------------------------------------------------------
Expression:   +5.7  *4<<6
Lexicons: + 5.7 * 4 << 6
Result: 1408 = 1408
Passed: ✅
--------------------------------------------------------------------------------
Expression: 6.7 /+ 3>>  1
Lexicons: 6.7 /+ 3 >> 1
Result: 1 = 1
Passed: ✅
--------------------------------------------------------------------------------
Expression: -  5 << 3
Lexicons: - 5 << 3
Result: -40 = -40
Passed: ✅
--------------------------------------------------------------------------------
Expression: 4/.2
Lexicons: 4 / 0.2
Result: 20 = 20
Passed: ✅
--------------------------------------------------------------------------------
Expression: -.5 << 3
Lexicons: - 0.5 << 3
Result: 0 = 0
Passed: ✅
--------------------------------------------------------------------------------
Expression: last(.4, last(1, 2), 5)
Lexicons: last ( 0.4 , last ( 1 , 2 ) , 5 )
Result: 5 = 5
Passed: ✅
--------------------------------------------------------------------------------
Expression: last(4, last(1, 2), .5)
Lexicons: last ( 4 , last ( 1 , 2 ) , 0.5 )
Result: 0.5 = 0.5
Passed: ✅
--------------------------------------------------------------------------------
Expression: last(4., last(1, 2), .5)
Lexicons: last ( 4. , last ( 1 , 2 ) , 0.5 )
Result: 0.5 = 0.5
Passed: ✅
--------------------------------------------------------------------------------
Expression: last(4, last(1, 2.), .5)
Lexicons: last ( 4 , last ( 1 , 2. ) , 0.5 )
Result: 0.5 = 0.5
Passed: ✅
--------------------------------------------------------------------------------
Expression: 7.9/-0
Lexicons: 7.9 / - 0
Result: ∞ = -∞
Passed: Lambda function makes this negative ❌
--------------------------------------------------------------------------------
Expression: Math.Log(-42)
Lexicons: Math.Log ( - 42 )
Result: NaN = NaN
Passed: Nan is always false ❌
--------------------------------------------------------------------------------
----------------------------[Should error properly]----------------------------
--------------------------------------------------------------------------------
ExpectedException: Invalid function!
Expression: avg(2, 3, 5)
Lexicons: avg ( 2 , 3 , 5 )
Invalid function: 'avg'
avg(2, 3, 5)
^~^
--------------------------------------------------------------------------------
ExpectedException: Invalid variable!
Expression: average(2, pie, 5)
Lexicons: average ( 2 , pie , 5 )
Invalid variable: 'pie'
average(2, pie, 5)
           ^~^
--------------------------------------------------------------------------------
ExpectedException: Closing unexisting paren!
Expression: 6 +3) /5-+8%6 / 8 ^5 ^4 * 2*+1
Lexicons: 6 + 3 ) / 5 -+ 8 % 6 / 8 ^ 5 ^ 4 * 2 *+ 1
Closing unexsistent paren
6 +3) /5-+8%6 / 8 ^5 ^4 * 2*+1
    ^
--------------------------------------------------------------------------------
ExpectedException: Opened paren is not closed!
Expression: (1 - Math.Pow(2, (1 + 2) * 3) * 3
Lexicons: ( 1 - Math.Pow ( 2 , ( 1 + 2 ) * 3 ) * 3
Opened paren is not closed
(1 - Math.Pow(2, (1 + 2) * 3) * 3
^
--------------------------------------------------------------------------------
ExpectedException: Not closing early opened function!
Expression: 1 - Math.Pow(2, (1 + 2) * 3 * 3
Lexicons: 1 - Math.Pow ( 2 , ( 1 + 2 ) * 3 * 3
Opened paren is not closed
1 - Math.Pow(2, (1 + 2) * 3 * 3
            ^
--------------------------------------------------------------------------------
ExpectedException: scientific notation cannot have space
Expression: 2e +10
Scientific notation cannot have space
2e +10
  ^
--------------------------------------------------------------------------------
ExpectedException: '$' is not a invalid character!
Expression: (1 - Math.Pow($, (1 + 2)))
Lexicons: ( 1 - Math.Pow ( $ , ( 1 + 2 ) ) )
Invalid token: '$'
(1 - Math.Pow($, (1 + 2)))
              ^
--------------------------------------------------------------------------------
ExpectedException: More arguments than supported!
Expression: Math.Pow(8, 4, -2, 5, 4)
Lexicons: Math.Pow ( 8 , 4 , - 2 , 5 , 4 )
pow() expects 2 arguments but received 5
Math.Pow(8, 4, -2, 5, 4)
^~~~~~~~~~~~~~~~~~~~~~~^
--------------------------------------------------------------------------------
ExpectedException: Empty parens!
Expression: last()
Lexicons: last ( )
Empty parens
last()
    ^^
--------------------------------------------------------------------------------
ExpectedException: Empty parens!
Expression: 4 /+ 2 * last() + 3
Lexicons: 4 /+ 2 * last ( ) + 3
Empty parens
4 /+ 2 * last() + 3
             ^^
--------------------------------------------------------------------------------
ExpectedException: Less arguments than supported!
Expression: Math.Pow(8)
Lexicons: Math.Pow ( 8 )
pow() expects 2 arguments but received 1
Math.Pow(8)
^~~~~~~~~~^
--------------------------------------------------------------------------------
ExpectedException: Evaluating empty string 
Expression: 
Lexicons:  
Unexpected failure to evaluate: There is no expression to evaluate.
--------------------------------------------------------------------------------
ExpectedException: Evaluating null string 
Expression: 
Lexicons:  
Unexpected failure to evaluate: There is no expression to evaluate.
--------------------------------------------------------------------------------
ExpectedException: Invalid number!
Expression: 4.2.0
Lexicons: 4.2.0
Invalid number: '4.2.0'
4.2.0
^~~~^
--------------------------------------------------------------------------------
ExpectedException: Invalid number!
Expression: 4..
Lexicons: 4..
Invalid number: '4..'
4..
^~^
--------------------------------------------------------------------------------
----------------------------------[GENERATED]----------------------------------
--------------------------------------------------------------------------------
